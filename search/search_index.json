{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Welcome to Alphaus documentation. Find user guides, developer guides, API references, tutorials, sample codes, and more.","title":"Overview"},{"location":"#overview","text":"Welcome to Alphaus documentation. Find user guides, developer guides, API references, tutorials, sample codes, and more.","title":"Overview"},{"location":"iam/","text":"Identity & Access Management (IAM) Users There are two types of Alphaus users; root users and subusers. Root users are account owners and super admins. These are the accounts you register to Alphaus and are in email address form. Subusers are users that are created by root users and are typically given minimal access to perform specific roles although subusers can also be admins. RBAC Alphaus RBAC is an organization-wide role-based access control system that provides fine-grained access management to Alphaus features and resources. In using Alphaus RBAC, you can grant only the amount of access to users that they need to perform their jobs. RBAC is defined around users, namespaces, roles, and permissions. Users can be actual users in your organization, or a virtual user used in scripts or automation codes. Roles are job functions or groups that have a certain level of authority, or a list of permissions attached to it. Examples are Admin , Developers , etc. You can assign up to five (5) roles to a user per namespace. RBAC roles and permissions are isolated based on namespaces. What this means is that a role can only be created under a specific namespace, with namespace-specific permissions attached to it. Root users are always super admins, or have unrestricted access across namespaces. Typically, root users should create subusers and assign specific roles to them. Namespaces Below is the list of supported namespaces under Alphaus RBAC: Product/service Namespace Ripple ripple Wave(Pro) wave User management users RBAC management rbac Permissions For the latest permissions, check out here . Permissions are hierarchical. Any user with permissions in the higher hierarchy will have permissions in the lower hierarchy as well. Some permissions can have resource filters. Empty filters mean all resources are allowed. Resource filters also follow the same hierarchical structure as permissions. At the moment, only the Allow effect is supported.","title":"IAM overview"},{"location":"iam/#identity-access-management-iam","text":"","title":"Identity &amp; Access Management (IAM)"},{"location":"iam/#users","text":"There are two types of Alphaus users; root users and subusers. Root users are account owners and super admins. These are the accounts you register to Alphaus and are in email address form. Subusers are users that are created by root users and are typically given minimal access to perform specific roles although subusers can also be admins.","title":"Users"},{"location":"iam/#rbac","text":"Alphaus RBAC is an organization-wide role-based access control system that provides fine-grained access management to Alphaus features and resources. In using Alphaus RBAC, you can grant only the amount of access to users that they need to perform their jobs. RBAC is defined around users, namespaces, roles, and permissions. Users can be actual users in your organization, or a virtual user used in scripts or automation codes. Roles are job functions or groups that have a certain level of authority, or a list of permissions attached to it. Examples are Admin , Developers , etc. You can assign up to five (5) roles to a user per namespace. RBAC roles and permissions are isolated based on namespaces. What this means is that a role can only be created under a specific namespace, with namespace-specific permissions attached to it. Root users are always super admins, or have unrestricted access across namespaces. Typically, root users should create subusers and assign specific roles to them.","title":"RBAC"},{"location":"iam/#namespaces","text":"Below is the list of supported namespaces under Alphaus RBAC: Product/service Namespace Ripple ripple Wave(Pro) wave User management users RBAC management rbac","title":"Namespaces"},{"location":"iam/#permissions","text":"For the latest permissions, check out here . Permissions are hierarchical. Any user with permissions in the higher hierarchy will have permissions in the lower hierarchy as well. Some permissions can have resource filters. Empty filters mean all resources are allowed. Resource filters also follow the same hierarchical structure as permissions. At the moment, only the Allow effect is supported.","title":"Permissions"},{"location":"blueapi/authentication/","text":"Authentication Blue uses API client credentials for authentication. You can generate your API credentials either from Ripple under \"Tools > API Access Tokens\", or Wave(Pro) under \"Settings > API Access Tokens\". Environment setup Set the environment variables below if you are using bluectl or any of our supported client libraries . Ripple Wave(Pro) ALPHAUS_CLIENT_ID ={ ripple-client-id } ALPHAUS_CLIENT_SECRET ={ ripple-client-secret } ALPHAUS_CLIENT_ID ={ wave-client-id } ALPHAUS_CLIENT_SECRET ={ wave-client-secret } ALPHAUS_AUTH_URL = https://login.alphaus.cloud/access_token You can validate your setup using bluectl . Run the following command: $ bluectl whoami If successful, it will output some information about the authenticated user. At the moment, setting both Ripple and Wave(Pro) client credentials is not supported. If both are set, authentication will default to Ripple. If you're using either bluectl or any of our supported client libraries, the authentication flow is as follows. First, it will look for the following environment variables: ALPHAUS_CLIENT_ID ALPHAUS_CLIENT_SECRET The ALPHAUS_AUTH_URL environment variable is optional for Ripple. For Wave(Pro) users, this can be set to: ALPHAUS_AUTH_URL = https://login.alphaus.cloud/access_token In most cases, the environment variables above should be sufficient. If those are not set, it will then look for: ALPHAUS_RIPPLE_CLIENT_ID ALPHAUS_RIPPLE_CLIENT_SECRET If those are not set, it will finally look for: ALPHAUS_WAVE_CLIENT_ID ALPHAUS_WAVE_CLIENT_SECRET Calling JSON/REST API directly If you prefer to call our JSON/REST API directly, you can use bluectl to generate the access token. This is useful for APIs that are not yet supported in bluectl . # Get access token for production: $ bluectl access-token eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhd... # You can use the command above to provide access tokens to your # other commands. For example: $ curl -H \"Authorization: Bearer $( bluectl access-token ) \" \\ https://api.alphaus.cloud/m/blue/iam/v1/whoami | jq { \"id\" : \"test\" , \"parent\" : \"MSP-xxxxxxx\" , \"metadata\" : {} } # If you want to access our NEXT (BETA) environment, you can do: $ curl -H \"Authorization: Bearer $( bluectl access-token \\ --client-id $MY_CLIENT_ID_NEXT \\ --client-secret $MY_CLIENT_SECRET_NEXT --beta ) \" \\ https://apinext.alphaus.cloud/m/blue/iam/v1/whoami | jq { \"id\" : \"test\" , \"parent\" : \"MSP-xxxxxxx\" , \"metadata\" : {} } You can also use bluectl to provide access tokens to our current, non-Blue APIs here . For example: $ curl -H \"Authorization: Bearer $( bluectl access-token ) \" \\ https://api.alphaus.cloud/m/ripple/user | jq { ... } Access token endpoints The following are the endpoints used to acquire product-specific access tokens. You will then use these tokens in your calls to the API using the Authorization: Bearer {token} HTTP header. Access tokens are not compatible between products. Ripple access tokens can only be used for Ripple endpoints; Wave(Pro) access tokens are only valid on Wave(Pro) endpoints. Ripple Wave(Pro) https://login.alphaus.cloud/ripple/access_token https://login.alphaus.cloud/access_token To obtain an access token, send a POST message to the access token endpoint using the format described below. Request POST {access-token-url} HTTP1.1 Content-Type: multipart/form-data {body formdata} Name Value grant_type Valid value(s): password , client_credentials client_id The client id you received from Alphaus or from API. client_secret The client secret you received from Alphaus or from API. username You account username. Required if grant_type is set to password . password You account password. Required if grant_type is set to password . scope Valid value(s): openid Response { \"id_token\" : \"eyJ0eXAiOiJKV1Q...\" , \"token_type\" : \"Bearer\" , \"expires_in\" : 86400 , \"access_token\" : \"eyJ0eXAiOiJKV1Q...\" , \"refresh_token\" : \"def50200...\" } Example $ curl -X POST \\ -F client_id ={ client-id } \\ -F client_secret ={ client-secret } \\ -F grant_type = client_credentials \\ -F scope = openid \\ https://login.alphaus.cloud/ripple/access_token","title":"Authentication"},{"location":"blueapi/authentication/#authentication","text":"Blue uses API client credentials for authentication. You can generate your API credentials either from Ripple under \"Tools > API Access Tokens\", or Wave(Pro) under \"Settings > API Access Tokens\".","title":"Authentication"},{"location":"blueapi/authentication/#environment-setup","text":"Set the environment variables below if you are using bluectl or any of our supported client libraries . Ripple Wave(Pro) ALPHAUS_CLIENT_ID ={ ripple-client-id } ALPHAUS_CLIENT_SECRET ={ ripple-client-secret } ALPHAUS_CLIENT_ID ={ wave-client-id } ALPHAUS_CLIENT_SECRET ={ wave-client-secret } ALPHAUS_AUTH_URL = https://login.alphaus.cloud/access_token You can validate your setup using bluectl . Run the following command: $ bluectl whoami If successful, it will output some information about the authenticated user. At the moment, setting both Ripple and Wave(Pro) client credentials is not supported. If both are set, authentication will default to Ripple. If you're using either bluectl or any of our supported client libraries, the authentication flow is as follows. First, it will look for the following environment variables: ALPHAUS_CLIENT_ID ALPHAUS_CLIENT_SECRET The ALPHAUS_AUTH_URL environment variable is optional for Ripple. For Wave(Pro) users, this can be set to: ALPHAUS_AUTH_URL = https://login.alphaus.cloud/access_token In most cases, the environment variables above should be sufficient. If those are not set, it will then look for: ALPHAUS_RIPPLE_CLIENT_ID ALPHAUS_RIPPLE_CLIENT_SECRET If those are not set, it will finally look for: ALPHAUS_WAVE_CLIENT_ID ALPHAUS_WAVE_CLIENT_SECRET","title":"Environment setup"},{"location":"blueapi/authentication/#calling-jsonrest-api-directly","text":"If you prefer to call our JSON/REST API directly, you can use bluectl to generate the access token. This is useful for APIs that are not yet supported in bluectl . # Get access token for production: $ bluectl access-token eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhd... # You can use the command above to provide access tokens to your # other commands. For example: $ curl -H \"Authorization: Bearer $( bluectl access-token ) \" \\ https://api.alphaus.cloud/m/blue/iam/v1/whoami | jq { \"id\" : \"test\" , \"parent\" : \"MSP-xxxxxxx\" , \"metadata\" : {} } # If you want to access our NEXT (BETA) environment, you can do: $ curl -H \"Authorization: Bearer $( bluectl access-token \\ --client-id $MY_CLIENT_ID_NEXT \\ --client-secret $MY_CLIENT_SECRET_NEXT --beta ) \" \\ https://apinext.alphaus.cloud/m/blue/iam/v1/whoami | jq { \"id\" : \"test\" , \"parent\" : \"MSP-xxxxxxx\" , \"metadata\" : {} } You can also use bluectl to provide access tokens to our current, non-Blue APIs here . For example: $ curl -H \"Authorization: Bearer $( bluectl access-token ) \" \\ https://api.alphaus.cloud/m/ripple/user | jq { ... }","title":"Calling JSON/REST API directly"},{"location":"blueapi/authentication/#access-token-endpoints","text":"The following are the endpoints used to acquire product-specific access tokens. You will then use these tokens in your calls to the API using the Authorization: Bearer {token} HTTP header. Access tokens are not compatible between products. Ripple access tokens can only be used for Ripple endpoints; Wave(Pro) access tokens are only valid on Wave(Pro) endpoints. Ripple Wave(Pro) https://login.alphaus.cloud/ripple/access_token https://login.alphaus.cloud/access_token To obtain an access token, send a POST message to the access token endpoint using the format described below. Request POST {access-token-url} HTTP1.1 Content-Type: multipart/form-data {body formdata} Name Value grant_type Valid value(s): password , client_credentials client_id The client id you received from Alphaus or from API. client_secret The client secret you received from Alphaus or from API. username You account username. Required if grant_type is set to password . password You account password. Required if grant_type is set to password . scope Valid value(s): openid Response { \"id_token\" : \"eyJ0eXAiOiJKV1Q...\" , \"token_type\" : \"Bearer\" , \"expires_in\" : 86400 , \"access_token\" : \"eyJ0eXAiOiJKV1Q...\" , \"refresh_token\" : \"def50200...\" } Example $ curl -X POST \\ -F client_id ={ client-id } \\ -F client_secret ={ client-secret } \\ -F grant_type = client_credentials \\ -F scope = openid \\ https://login.alphaus.cloud/ripple/access_token","title":"Access token endpoints"},{"location":"blueapi/bluectl/","text":"bluectl bluectl is the official command line interface (CLI) for Alphaus services. It uses the same API that powers our Ripple/Wave(Pro)/Aqua UI consoles. Installation You can install bluectl using Homebrew (MacOS, Linux, and Windows through WSL/2 ). Run the command below in a terminal: $ brew install alphauslabs/tap/bluectl Authentication bluectl uses API client credentials for authentication. You can generate your API credentials either from Ripple under \"Tools > API Access Tokens\", or Wave(Pro) under \"Settings > API Access Tokens\". To validate your credentials with bluectl , run the command below (replace the {client-*} part with your actual client id and client secret values): $ bluectl whoami --client-id { client-id } --client-secret { client-secret } If successful, it will output some information about the authenticated user. Environment variables You can also store your credentials as environment variables instead of typing them everytime you run a command. Check out the \"Environment setup\" section here . With environment variables set, you should now be able to run any bluectl commands without the --client-id and --client-secret flags. $ bluectl whoami Configuration file bluectl also supports authentication using a configuration file located in $HOME/.config/alphaus/config.toml . [default] client-id = 'sample-id' client-secret = 'sample-secret' [beta] client-id = 'sample-id' client-secret = 'sample-secret' auth-url = 'https://loginnext.alphaus.cloud/ripple/access_token' You can select a profile using the --profile flag. For example: $ bluectl whoami --profile beta If the configuration file exists and the [default] profile is set, bluectl will use that credentials. In this case, the --profile default flag can be omitted. If both environment variables and the [default] profile are present, bluectl will use the [default] profile. # This usage... $ bluectl whoami --profile default # is the same as... $ bluectl whoami Usage Finally, you can explore some of bluectl 's available supported commands by running: # Check out the main commands: $ bluectl -h # More information on a specific subcommand: $ bluectl { subcommand } -h","title":"CLI: bluectl"},{"location":"blueapi/bluectl/#bluectl","text":"bluectl is the official command line interface (CLI) for Alphaus services. It uses the same API that powers our Ripple/Wave(Pro)/Aqua UI consoles.","title":"bluectl"},{"location":"blueapi/bluectl/#installation","text":"You can install bluectl using Homebrew (MacOS, Linux, and Windows through WSL/2 ). Run the command below in a terminal: $ brew install alphauslabs/tap/bluectl","title":"Installation"},{"location":"blueapi/bluectl/#authentication","text":"bluectl uses API client credentials for authentication. You can generate your API credentials either from Ripple under \"Tools > API Access Tokens\", or Wave(Pro) under \"Settings > API Access Tokens\". To validate your credentials with bluectl , run the command below (replace the {client-*} part with your actual client id and client secret values): $ bluectl whoami --client-id { client-id } --client-secret { client-secret } If successful, it will output some information about the authenticated user.","title":"Authentication"},{"location":"blueapi/bluectl/#environment-variables","text":"You can also store your credentials as environment variables instead of typing them everytime you run a command. Check out the \"Environment setup\" section here . With environment variables set, you should now be able to run any bluectl commands without the --client-id and --client-secret flags. $ bluectl whoami","title":"Environment variables"},{"location":"blueapi/bluectl/#configuration-file","text":"bluectl also supports authentication using a configuration file located in $HOME/.config/alphaus/config.toml . [default] client-id = 'sample-id' client-secret = 'sample-secret' [beta] client-id = 'sample-id' client-secret = 'sample-secret' auth-url = 'https://loginnext.alphaus.cloud/ripple/access_token' You can select a profile using the --profile flag. For example: $ bluectl whoami --profile beta If the configuration file exists and the [default] profile is set, bluectl will use that credentials. In this case, the --profile default flag can be omitted. If both environment variables and the [default] profile are present, bluectl will use the [default] profile. # This usage... $ bluectl whoami --profile default # is the same as... $ bluectl whoami","title":"Configuration file"},{"location":"blueapi/bluectl/#usage","text":"Finally, you can explore some of bluectl 's available supported commands by running: # Check out the main commands: $ bluectl -h # More information on a specific subcommand: $ bluectl { subcommand } -h","title":"Usage"},{"location":"blueapi/client-sdks/","text":"Client SDKs We are in the process of generating client libraries (SDKs) for programming languages supported in gRPC . If you have a particular programming language in the list you want supported, contact us at support@alphaus.cloud and we will try to prioritize it. blue-sdk-go Check out here for more information. blue-sdk-python The Python SDK is now available via pip . Simply do: $ pip install alphausblue and the Blue Python SDK, and all its dependencies will be installed. Examples can be found on our GitHub repo. Check out here for more information.","title":"Client SDKs"},{"location":"blueapi/client-sdks/#client-sdks","text":"We are in the process of generating client libraries (SDKs) for programming languages supported in gRPC . If you have a particular programming language in the list you want supported, contact us at support@alphaus.cloud and we will try to prioritize it.","title":"Client SDKs"},{"location":"blueapi/client-sdks/#blue-sdk-go","text":"Check out here for more information.","title":"blue-sdk-go"},{"location":"blueapi/client-sdks/#blue-sdk-python","text":"The Python SDK is now available via pip . Simply do: $ pip install alphausblue and the Blue Python SDK, and all its dependencies will be installed. Examples can be found on our GitHub repo. Check out here for more information.","title":"blue-sdk-python"},{"location":"blueapi/overview/","text":"Overview API Reference https://alphauslabs.github.io/blueapidocs/ Blue API allows you to programmatically access our services such as Ripple and Wave(Pro) . It uses protocol buffers for service and message definitions, and gRPC for implementation and server/client stub generation. It also uses grpc-gateway for proxying JSON/REST requests to gRPC, and generating OpenAPI documentation. This way, you have the option to use our APIs using either gRPC or JSON/REST, or both. At the moment, Blue API is still a work in progress. Most of the APIs currently supported in Ripple and Wave(Pro) are still not available. In the meantime, you can still use our JSON/REST APIs here . We plan to upgrade as many of our JSON/REST APIs as possible over to gRPC as it is significantly more efficient in terms of throughput and CPU usage compared to JSON/REST API. However, we don't intend to deprecate our JSON/REST APIs once the transition is completed. You should be able to use both.","title":"Overview"},{"location":"blueapi/overview/#overview","text":"API Reference https://alphauslabs.github.io/blueapidocs/ Blue API allows you to programmatically access our services such as Ripple and Wave(Pro) . It uses protocol buffers for service and message definitions, and gRPC for implementation and server/client stub generation. It also uses grpc-gateway for proxying JSON/REST requests to gRPC, and generating OpenAPI documentation. This way, you have the option to use our APIs using either gRPC or JSON/REST, or both. At the moment, Blue API is still a work in progress. Most of the APIs currently supported in Ripple and Wave(Pro) are still not available. In the meantime, you can still use our JSON/REST APIs here . We plan to upgrade as many of our JSON/REST APIs as possible over to gRPC as it is significantly more efficient in terms of throughput and CPU usage compared to JSON/REST API. However, we don't intend to deprecate our JSON/REST APIs once the transition is completed. You should be able to use both.","title":"Overview"},{"location":"blueapi/apis/admin/","text":"Admin API API Reference https://alphauslabs.github.io/blueapidocs/#/Admin The Admin API group provides the API for managing administrative resources and operations in Blue.","title":"Admin API"},{"location":"blueapi/apis/admin/#admin-api","text":"API Reference https://alphauslabs.github.io/blueapidocs/#/Admin The Admin API group provides the API for managing administrative resources and operations in Blue.","title":"Admin API"},{"location":"blueapi/apis/billing/","text":"Billing API API Reference https://alphauslabs.github.io/blueapidocs/#/Billing The Billing API group provides the API for managing billing- and invoice-related resources and operations in Blue.","title":"Billing API"},{"location":"blueapi/apis/billing/#billing-api","text":"API Reference https://alphauslabs.github.io/blueapidocs/#/Billing The Billing API group provides the API for managing billing- and invoice-related resources and operations in Blue.","title":"Billing API"},{"location":"blueapi/apis/cost/","text":"Cost API API Reference https://alphauslabs.github.io/blueapidocs/#/Cost The Cost API group provides the API for interacting with cost- and usage-related resources and operations in Blue.","title":"Cost API"},{"location":"blueapi/apis/cost/#cost-api","text":"API Reference https://alphauslabs.github.io/blueapidocs/#/Cost The Cost API group provides the API for interacting with cost- and usage-related resources and operations in Blue.","title":"Cost API"},{"location":"blueapi/apis/iam/","text":"IAM API API Reference https://alphauslabs.github.io/blueapidocs/#/Iam The IAM API group provides the API for managing IAM-related resources and components in Blue. Check out this page to have an overview of how IAM works in Blue. Group Root Users [WIP] You can create a root user account for a given billing group or access group with a given set of Wave or Aqua features. Currently, endpoints for creating, retrieving and deleting a group root user are supported as well as retrieving all the group root users associated with the organization. In addition, all the feature flags for a given group root user can be retrieved and updated. Feature Flags In order to enable or disable a feature in Aqua or Wave for a given user, the appropriate feature flag should be either enabled or disabled respectively. The following is a list of such feature flags and which feature they control: Feature Flag Feature Name Action Product dashboard_graph Dashboard View Graph Wave / Wave Pro usage_account Usage Reports Accounts - Access Wave / Wave Pro usage_account_graph Usage Reports Accounts - View Graph Wave / Wave Pro usage_account_menu_account_edit Usage Reports Accounts - Edit Info Wave / Wave Pro usage_account_menu_budget Usage Reports Accounts - View Budget Settings Wave / Wave Pro usage_account_menu_budget_edit Usage Reports Accounts - Edit Budget Settings Wave / Wave Pro usage_account_menu_fees_fee Usage Reports Accounts - View Fees Wave / Wave Pro usage_account_menu_fees_credit Usage Reports Accounts - View Credits Wave / Wave Pro usage_account_menu_fees_refund Usage Reports Accounts - View Refunds Wave / Wave Pro usage_account_menu_fees_other_fees Usage Reports Accounts - View Other Fees Wave / Wave Pro usage_report_download Usage Reports Accounts - Download Reports CSV Wave / Wave Pro usage_group Usage Reports Groups - Access Wave / Wave Pro usage_group_graph Usage Reports Groups - View Graph Wave / Wave Pro usage_tag Usage Reports Tags - Access Wave / Wave Pro usage_tag_graph Usage Reports Tags - View Graph Wave / Wave Pro usage_crosstag Usage Reports Crosstag - Access Wave / Wave Pro usage_crosstag_graph Usage Reports Crosstag - View Graph Wave / Wave Pro ri_purchased Reserved Instances View Purchased RI Wave ri_utilization Reserved Instances View RI Utilization Wave ri_recommendation Recommendations Access Wave sp_purchased Savings Plans Access Wave invoice Others Invoice - Display Link Wave / Wave Pro invoice_download_csv_discount Others Invoice - Download Discounted CSV Wave / Wave Pro invoice_download_csv_merged Others Invoice - Download Merged CSV Wave / Wave Pro open_api Others API Access Tokens Wave / Wave Pro users_management Others Sub-user Management Wave / Wave Pro aq_dashboard Dashboard Access Aqua aq_coverage_ratio Coverage Ratio Access Aqua aq_ri_management Reserved Instances Access Aqua aq_sp_management Savings Plans Access Aqua aq_ri_sp_instances RI & SP Recommendations Access Aqua aq_right_sizing Instance Right-Sizing Access Aqua aq_scheduling Scheduling Access Aqua report_filters Report Filters Access Wave Pro When setting a feature flag, a value of true will enable the feature and a value of false will disable the feature.","title":"IAM API"},{"location":"blueapi/apis/iam/#iam-api","text":"API Reference https://alphauslabs.github.io/blueapidocs/#/Iam The IAM API group provides the API for managing IAM-related resources and components in Blue. Check out this page to have an overview of how IAM works in Blue.","title":"IAM API"},{"location":"blueapi/apis/iam/#group-root-users-wip","text":"You can create a root user account for a given billing group or access group with a given set of Wave or Aqua features. Currently, endpoints for creating, retrieving and deleting a group root user are supported as well as retrieving all the group root users associated with the organization. In addition, all the feature flags for a given group root user can be retrieved and updated.","title":"Group Root Users [WIP]"},{"location":"blueapi/apis/iam/#feature-flags","text":"In order to enable or disable a feature in Aqua or Wave for a given user, the appropriate feature flag should be either enabled or disabled respectively. The following is a list of such feature flags and which feature they control: Feature Flag Feature Name Action Product dashboard_graph Dashboard View Graph Wave / Wave Pro usage_account Usage Reports Accounts - Access Wave / Wave Pro usage_account_graph Usage Reports Accounts - View Graph Wave / Wave Pro usage_account_menu_account_edit Usage Reports Accounts - Edit Info Wave / Wave Pro usage_account_menu_budget Usage Reports Accounts - View Budget Settings Wave / Wave Pro usage_account_menu_budget_edit Usage Reports Accounts - Edit Budget Settings Wave / Wave Pro usage_account_menu_fees_fee Usage Reports Accounts - View Fees Wave / Wave Pro usage_account_menu_fees_credit Usage Reports Accounts - View Credits Wave / Wave Pro usage_account_menu_fees_refund Usage Reports Accounts - View Refunds Wave / Wave Pro usage_account_menu_fees_other_fees Usage Reports Accounts - View Other Fees Wave / Wave Pro usage_report_download Usage Reports Accounts - Download Reports CSV Wave / Wave Pro usage_group Usage Reports Groups - Access Wave / Wave Pro usage_group_graph Usage Reports Groups - View Graph Wave / Wave Pro usage_tag Usage Reports Tags - Access Wave / Wave Pro usage_tag_graph Usage Reports Tags - View Graph Wave / Wave Pro usage_crosstag Usage Reports Crosstag - Access Wave / Wave Pro usage_crosstag_graph Usage Reports Crosstag - View Graph Wave / Wave Pro ri_purchased Reserved Instances View Purchased RI Wave ri_utilization Reserved Instances View RI Utilization Wave ri_recommendation Recommendations Access Wave sp_purchased Savings Plans Access Wave invoice Others Invoice - Display Link Wave / Wave Pro invoice_download_csv_discount Others Invoice - Download Discounted CSV Wave / Wave Pro invoice_download_csv_merged Others Invoice - Download Merged CSV Wave / Wave Pro open_api Others API Access Tokens Wave / Wave Pro users_management Others Sub-user Management Wave / Wave Pro aq_dashboard Dashboard Access Aqua aq_coverage_ratio Coverage Ratio Access Aqua aq_ri_management Reserved Instances Access Aqua aq_sp_management Savings Plans Access Aqua aq_ri_sp_instances RI & SP Recommendations Access Aqua aq_right_sizing Instance Right-Sizing Access Aqua aq_scheduling Scheduling Access Aqua report_filters Report Filters Access Wave Pro When setting a feature flag, a value of true will enable the feature and a value of false will disable the feature.","title":"Feature Flags"},{"location":"blueapi/apis/kvstore/","text":"KvStore API API Reference https://alphauslabs.github.io/blueapidocs/#/KvStore All Alphaus clients have free access to the free-tier version of our KvStore, a highly-available, distributed key/value store that is easily accessible using curl , or bluectl , or using any of the gRPC-supported programming languages . All data are encrypted in transit and at rest so you can use this as a general purpose key/value database even in your production workloads. The free version is limited to a regional store closest to you where data is replicated across three zones. If you want to have access to an unlimited, enterprise-grade version, either regional, multi-region, or even a globally-distributed version (data is replicated across multiple regions across multiple continents), please contact our Sales/Support team. Limits Total data size (free tier) - around ~100MB Maximum key size - 7KB Maximum value size - 10MB Examples Let's use bluectl to demonstrate how to use KvStore. To write a single key/value: # key=hello, value=world $ bluectl kv write hello world # If value has spaces, enclose with double-quotes (\") or single-quotes (') $ bluectl kv write space \"this value has spaces\" To read the key/value: # Read key=hello, '--bare' for clean output $ bluectl kv read hello --bare world You can also write file contents as value: # Here's a sample file with JSON contents $ cat /tmp/test.json { \"title\" : \"JP text\" , \"message\" : \"\u65e5\u672c\" } # Write the key/value from file, key=json $ bluectl kv write json --from-file = /tmp/test.json # Let's try reading the \"message\" section using jq $ bluectl kv read json --bare | jq -r .message \u65e5\u672c You can also scan multiple keys: # Read all keys $ bluectl kv scan --outfmt = json { \"key\" : \"hello\" , \"value\" : \"world\" } { \"key\" : \"json\" , \"value\" : \"{\\n \\\"title\\\":\\\"JP text\\\",\\n \\\"message\\\":\\\"\u65e5\u672c\\\"\\n}\" } { \"key\" : \"space\" , \"value\" : \"this value has spaces\" } # Or just some keys using SQL's LIKE operator $ bluectl kv scan '%ell%' KEY VALUE hello world","title":"KvStore API"},{"location":"blueapi/apis/kvstore/#kvstore-api","text":"API Reference https://alphauslabs.github.io/blueapidocs/#/KvStore All Alphaus clients have free access to the free-tier version of our KvStore, a highly-available, distributed key/value store that is easily accessible using curl , or bluectl , or using any of the gRPC-supported programming languages . All data are encrypted in transit and at rest so you can use this as a general purpose key/value database even in your production workloads. The free version is limited to a regional store closest to you where data is replicated across three zones. If you want to have access to an unlimited, enterprise-grade version, either regional, multi-region, or even a globally-distributed version (data is replicated across multiple regions across multiple continents), please contact our Sales/Support team.","title":"KvStore API"},{"location":"blueapi/apis/kvstore/#limits","text":"Total data size (free tier) - around ~100MB Maximum key size - 7KB Maximum value size - 10MB","title":"Limits"},{"location":"blueapi/apis/kvstore/#examples","text":"Let's use bluectl to demonstrate how to use KvStore. To write a single key/value: # key=hello, value=world $ bluectl kv write hello world # If value has spaces, enclose with double-quotes (\") or single-quotes (') $ bluectl kv write space \"this value has spaces\" To read the key/value: # Read key=hello, '--bare' for clean output $ bluectl kv read hello --bare world You can also write file contents as value: # Here's a sample file with JSON contents $ cat /tmp/test.json { \"title\" : \"JP text\" , \"message\" : \"\u65e5\u672c\" } # Write the key/value from file, key=json $ bluectl kv write json --from-file = /tmp/test.json # Let's try reading the \"message\" section using jq $ bluectl kv read json --bare | jq -r .message \u65e5\u672c You can also scan multiple keys: # Read all keys $ bluectl kv scan --outfmt = json { \"key\" : \"hello\" , \"value\" : \"world\" } { \"key\" : \"json\" , \"value\" : \"{\\n \\\"title\\\":\\\"JP text\\\",\\n \\\"message\\\":\\\"\u65e5\u672c\\\"\\n}\" } { \"key\" : \"space\" , \"value\" : \"this value has spaces\" } # Or just some keys using SQL's LIKE operator $ bluectl kv scan '%ell%' KEY VALUE hello world","title":"Examples"},{"location":"blueapi/apis/operations/","text":"Operations API API Reference https://alphauslabs.github.io/blueapidocs/#/Operations The Operations API group provides the API for managing long-running operations in Blue.","title":"Operations API"},{"location":"blueapi/apis/operations/#operations-api","text":"API Reference https://alphauslabs.github.io/blueapidocs/#/Operations The Operations API group provides the API for managing long-running operations in Blue.","title":"Operations API"},{"location":"blueapi/apis/org/","text":"Organization API API Reference https://alphauslabs.github.io/blueapidocs/#/Organization","title":"Organization API"},{"location":"blueapi/apis/org/#organization-api","text":"API Reference https://alphauslabs.github.io/blueapidocs/#/Organization","title":"Organization API"},{"location":"blueapi/apis/preferences/","text":"Preferences API API Reference https://alphauslabs.github.io/blueapidocs/#/Preferences The Preferences API group provides the API for managing user-scoped preferences and settings in Blue.","title":"Preferences API"},{"location":"blueapi/apis/preferences/#preferences-api","text":"API Reference https://alphauslabs.github.io/blueapidocs/#/Preferences The Preferences API group provides the API for managing user-scoped preferences and settings in Blue.","title":"Preferences API"},{"location":"guides/","text":"Overview Find user guides, developer guides, API references, tutorials, sample codes, and more.","title":"Overview"},{"location":"guides/#overview","text":"Find user guides, developer guides, API references, tutorials, sample codes, and more.","title":"Overview"},{"location":"guides/aws-enable-api-access/","text":"Enabling AWS payer API access using bluectl Warning This guide is only applicable to Ripple users. If you have registered your AWS payer account using CloudFormation as described here , Alphaus will have a read-only API access to the payer's cost details such as RIs, SPs, etc. However, if you have some payer accounts that were registered to Ripple manually (before the CloudFormation support was released), Alphaus only has read access to the S3 bucket containing the CUR files. Although API access is optional, we recommend you to setup API access to allow us to have more accuracy in the calculation results. Without API access, our calculation engine, especially for trueunblended, uses CUR data for your RIs and SPs. This is only a best-effort basis as RI and SP information in the CUR are sometimes incomplete. API access will allow us to have a more accurate information about your payer's RIs, SPs, and other cost-related resources. Make sure to install bluectl first. Also make sure that you have the needed permissions to deploy CloudFormation templates on the payer account. The template used in this guide will create an IAM Role with read-only API access to the payer's cost details. You can check out the actual template here . Open a terminal and run the following command ( 012345678901 is a sample payer account ID): $ bluectl xacct create 012345678901 apionly Open the link below in your browser and deploy: https://console.aws.amazon.com/cloudformation/home?region = us-east-1#/stacks/... Confirm successful deployment? [ Y/n ] : Click on the URL link, or it copy to your browser. It will open the CloudFormation console with the parameters filled up. Leave the defaults, check the \"acknowledge\" checkbox, and click \"Create stack\". Once the deployment is done and successful, return to the terminal above and press Enter ( Y is the default option). The deployment validation will begin. If there are no issues, validation details are displayed and the process is completed. You can run the command below to check API access information about your payer accounts. $ bluectl xacct list","title":"Enabling AWS payer API access"},{"location":"guides/aws-enable-api-access/#enabling-aws-payer-api-access-using-bluectl","text":"Warning This guide is only applicable to Ripple users. If you have registered your AWS payer account using CloudFormation as described here , Alphaus will have a read-only API access to the payer's cost details such as RIs, SPs, etc. However, if you have some payer accounts that were registered to Ripple manually (before the CloudFormation support was released), Alphaus only has read access to the S3 bucket containing the CUR files. Although API access is optional, we recommend you to setup API access to allow us to have more accuracy in the calculation results. Without API access, our calculation engine, especially for trueunblended, uses CUR data for your RIs and SPs. This is only a best-effort basis as RI and SP information in the CUR are sometimes incomplete. API access will allow us to have a more accurate information about your payer's RIs, SPs, and other cost-related resources. Make sure to install bluectl first. Also make sure that you have the needed permissions to deploy CloudFormation templates on the payer account. The template used in this guide will create an IAM Role with read-only API access to the payer's cost details. You can check out the actual template here . Open a terminal and run the following command ( 012345678901 is a sample payer account ID): $ bluectl xacct create 012345678901 apionly Open the link below in your browser and deploy: https://console.aws.amazon.com/cloudformation/home?region = us-east-1#/stacks/... Confirm successful deployment? [ Y/n ] : Click on the URL link, or it copy to your browser. It will open the CloudFormation console with the parameters filled up. Leave the defaults, check the \"acknowledge\" checkbox, and click \"Create stack\". Once the deployment is done and successful, return to the terminal above and press Enter ( Y is the default option). The deployment validation will begin. If there are no issues, validation details are displayed and the process is completed. You can run the command below to check API access information about your payer accounts. $ bluectl xacct list","title":"Enabling AWS payer API access using bluectl"},{"location":"guides/aws-query-costs/","text":"Querying AWS costs using bluectl bluectl is a flexible tool that you can use to query your cost data in Ripple/Wave(Pro). Since it also supports most, if not all of the possible API parameters, in some cases, you can even query data combinations that are not yet available in our UI. --raw-input Blue API and bluectl are still in beta. For bluectl to be able to support most Blue API parameter combinations, it provides a --raw-input flag which accepts the same JSON input required in Blue API for most of its commands. Refer to the examples using the --raw-input flag below. As Blue API becomes more stable, we will provide more easy-to-use parameters to bluectl so you don't have to use the --raw-input flag in the future. Stay tuned. Querying a billing group's daily costs for the current month # Replace 'abcdef' with your billing internal id. $ bluectl awscost get --raw-input '{\"groupId\":\"abcdef\"}' Querying an account's daily costs for the current month # Replace '012345678901' with your account id. $ bluectl awscost get --raw-input '{\"accountId\":\"012345678901\"}' Using date ranges in your query # Query costs for the month of December, 2021. $ bluectl awscost get --raw-input \\ '{\"accountId\":\"012345678901\",\"startTime\":\"20211201\",\"endTime\":\"20211231\"}' Exporting your queries to CSV You can use the --out {location} flag to export your queries to a CSV file. For example: $ bluectl awscost get --raw-input '{\"groupId\":\"abcdef\"}' --out /tmp/out.csv Reference Check out the JSON request format here to know more about the bluectl awscost get --raw-input '{...}' command's supported parameters. Tip: use file as --raw-input If your --raw-input is getting longer and is becoming difficult to read, you can write it in a file, and then reference that file in your command. For example, # This is your query file. Modify as needed. $ cat /tmp/query.json { \"accountId\" : \"012345678901\" , \"startTime\" : \"20211201\" , \"endTime\" : \"20211231\" } # Use query.json file as your --raw-input. $ bluectl awscost get --raw-input \" $( cat /tmp/query.json ) \" --out /tmp/out.csv Grouping by month # Query monthly service costs from December, 2021 to January 2022. $ cat /tmp/query.json { \"accountId\" : \"012345678901\" , \"startTime\" : \"20211201\" , \"endTime\" : \"20220131\" , \"awsOptions\" : { \"groupByMonth\" :true } } $ bluectl awscost get --raw-input \" $( cat /tmp/query.json ) \" --out /tmp/out.csv Grouping by cost attributes You can group your costs by cost attributes (or columns). Blue API supports the following attributes for grouping: productCode , serviceCode , region , zone , usageType , instanceType , operation , invoiceId , description , and resourceId . You can group by any combination of these attributes. # Query January 2022 daily costs grouped by service and region. $ cat /tmp/query.json { \"accountId\" : \"012345678901\" , \"startTime\" : \"20220101\" , \"endTime\" : \"20220131\" , \"awsOptions\" : { \"groupByColumns\" : \"productCode,region\" } } $ bluectl awscost get --raw-input \" $( cat /tmp/query.json ) \" --out /tmp/out.csv # Query January 2022 costs grouped by service and region, then grouped by month. $ cat /tmp/query.json { \"accountId\" : \"012345678901\" , \"startTime\" : \"20220101\" , \"endTime\" : \"20220131\" , \"awsOptions\" : { \"groupByColumns\" : \"productCode,region\" , \"groupByMonth\" :true } } $ bluectl awscost get --raw-input \" $( cat /tmp/query.json ) \" --out /tmp/out.csv Filtering your queries Blue API provides a flexible way for you to further filter your queries in combination with your cost attributes. This allows you to query more specific information such as specific services, or specific regions, or a combination of the two. $ cat /tmp/query.json { \"accountId\" : \"012345678901\" , \"startTime\" : \"20220101\" , \"endTime\" : \"20220131\" , \"awsOptions\" : { \"filters\" : [ { \"andFilters\" : { \"productCode\" : \"AmazonEC2\" , \"region\" : \"ap-northeast-1\" } } , { \"andFilters\" : { \"productCode\" : \"AmazonRDS\" } } ] } } $ bluectl awscost get --raw-input \" $( cat /tmp/query.json ) \" --out /tmp/out.csv The example above can be interpreted as: ( productCode is equal to \"AmazonEC2\" AND region is equal to \"ap-northeast-1\") OR ( productCode is equal to \"AmazonRDS\") The items inside the andFilters key use the AND operator, while the andFilters themselves use the OR operator. Blue API filters also support regular expressions using Google's RE2 by prefixing your filter values with either re: (match) or !re: (reverse match). # Query all EC2 or RDS costs in all regions starting with \"ap-\". $ cat /tmp/query.json { \"accountId\" : \"012345678901\" , \"startTime\" : \"20220101\" , \"endTime\" : \"20220131\" , \"awsOptions\" : { \"filters\" : [ { \"andFilters\" : { \"productCode\" : \"re:AmazonEC2|AmazonRDS\" , \"region\" : \"re:^ap-.*\" } } ] } } $ bluectl awscost get --raw-input \" $( cat /tmp/query.json ) \" --out /tmp/out.csv Filtering by tags Tag filtering is similar to filtering by attributes in terms of the logic order and regular expressions support. The only difference is that your andFilters map will contain the tag key/values. # Query all costs that are tagged with 'key=user:Name' and 'value=some-name'. $ cat /tmp/query.json { \"accountId\" : \"012345678901\" , \"startTime\" : \"20220101\" , \"endTime\" : \"20220131\" , \"awsOptions\" : { \"tagFilters\" : [ { \"andFilters\" : { \"user:Name\" : \"some-name\" } } ] } } $ bluectl awscost get --raw-input \" $( cat /tmp/query.json ) \" --out /tmp/out.csv","title":"Querying AWS costs using bluectl"},{"location":"guides/aws-query-costs/#querying-aws-costs-using-bluectl","text":"bluectl is a flexible tool that you can use to query your cost data in Ripple/Wave(Pro). Since it also supports most, if not all of the possible API parameters, in some cases, you can even query data combinations that are not yet available in our UI. --raw-input Blue API and bluectl are still in beta. For bluectl to be able to support most Blue API parameter combinations, it provides a --raw-input flag which accepts the same JSON input required in Blue API for most of its commands. Refer to the examples using the --raw-input flag below. As Blue API becomes more stable, we will provide more easy-to-use parameters to bluectl so you don't have to use the --raw-input flag in the future. Stay tuned.","title":"Querying AWS costs using bluectl"},{"location":"guides/aws-query-costs/#querying-a-billing-groups-daily-costs-for-the-current-month","text":"# Replace 'abcdef' with your billing internal id. $ bluectl awscost get --raw-input '{\"groupId\":\"abcdef\"}'","title":"Querying a billing group's daily costs for the current month"},{"location":"guides/aws-query-costs/#querying-an-accounts-daily-costs-for-the-current-month","text":"# Replace '012345678901' with your account id. $ bluectl awscost get --raw-input '{\"accountId\":\"012345678901\"}'","title":"Querying an account's daily costs for the current month"},{"location":"guides/aws-query-costs/#using-date-ranges-in-your-query","text":"# Query costs for the month of December, 2021. $ bluectl awscost get --raw-input \\ '{\"accountId\":\"012345678901\",\"startTime\":\"20211201\",\"endTime\":\"20211231\"}'","title":"Using date ranges in your query"},{"location":"guides/aws-query-costs/#exporting-your-queries-to-csv","text":"You can use the --out {location} flag to export your queries to a CSV file. For example: $ bluectl awscost get --raw-input '{\"groupId\":\"abcdef\"}' --out /tmp/out.csv Reference Check out the JSON request format here to know more about the bluectl awscost get --raw-input '{...}' command's supported parameters. Tip: use file as --raw-input If your --raw-input is getting longer and is becoming difficult to read, you can write it in a file, and then reference that file in your command. For example, # This is your query file. Modify as needed. $ cat /tmp/query.json { \"accountId\" : \"012345678901\" , \"startTime\" : \"20211201\" , \"endTime\" : \"20211231\" } # Use query.json file as your --raw-input. $ bluectl awscost get --raw-input \" $( cat /tmp/query.json ) \" --out /tmp/out.csv","title":"Exporting your queries to CSV"},{"location":"guides/aws-query-costs/#grouping-by-month","text":"# Query monthly service costs from December, 2021 to January 2022. $ cat /tmp/query.json { \"accountId\" : \"012345678901\" , \"startTime\" : \"20211201\" , \"endTime\" : \"20220131\" , \"awsOptions\" : { \"groupByMonth\" :true } } $ bluectl awscost get --raw-input \" $( cat /tmp/query.json ) \" --out /tmp/out.csv","title":"Grouping by month"},{"location":"guides/aws-query-costs/#grouping-by-cost-attributes","text":"You can group your costs by cost attributes (or columns). Blue API supports the following attributes for grouping: productCode , serviceCode , region , zone , usageType , instanceType , operation , invoiceId , description , and resourceId . You can group by any combination of these attributes. # Query January 2022 daily costs grouped by service and region. $ cat /tmp/query.json { \"accountId\" : \"012345678901\" , \"startTime\" : \"20220101\" , \"endTime\" : \"20220131\" , \"awsOptions\" : { \"groupByColumns\" : \"productCode,region\" } } $ bluectl awscost get --raw-input \" $( cat /tmp/query.json ) \" --out /tmp/out.csv # Query January 2022 costs grouped by service and region, then grouped by month. $ cat /tmp/query.json { \"accountId\" : \"012345678901\" , \"startTime\" : \"20220101\" , \"endTime\" : \"20220131\" , \"awsOptions\" : { \"groupByColumns\" : \"productCode,region\" , \"groupByMonth\" :true } } $ bluectl awscost get --raw-input \" $( cat /tmp/query.json ) \" --out /tmp/out.csv","title":"Grouping by cost attributes"},{"location":"guides/aws-query-costs/#filtering-your-queries","text":"Blue API provides a flexible way for you to further filter your queries in combination with your cost attributes. This allows you to query more specific information such as specific services, or specific regions, or a combination of the two. $ cat /tmp/query.json { \"accountId\" : \"012345678901\" , \"startTime\" : \"20220101\" , \"endTime\" : \"20220131\" , \"awsOptions\" : { \"filters\" : [ { \"andFilters\" : { \"productCode\" : \"AmazonEC2\" , \"region\" : \"ap-northeast-1\" } } , { \"andFilters\" : { \"productCode\" : \"AmazonRDS\" } } ] } } $ bluectl awscost get --raw-input \" $( cat /tmp/query.json ) \" --out /tmp/out.csv The example above can be interpreted as: ( productCode is equal to \"AmazonEC2\" AND region is equal to \"ap-northeast-1\") OR ( productCode is equal to \"AmazonRDS\") The items inside the andFilters key use the AND operator, while the andFilters themselves use the OR operator. Blue API filters also support regular expressions using Google's RE2 by prefixing your filter values with either re: (match) or !re: (reverse match). # Query all EC2 or RDS costs in all regions starting with \"ap-\". $ cat /tmp/query.json { \"accountId\" : \"012345678901\" , \"startTime\" : \"20220101\" , \"endTime\" : \"20220131\" , \"awsOptions\" : { \"filters\" : [ { \"andFilters\" : { \"productCode\" : \"re:AmazonEC2|AmazonRDS\" , \"region\" : \"re:^ap-.*\" } } ] } } $ bluectl awscost get --raw-input \" $( cat /tmp/query.json ) \" --out /tmp/out.csv","title":"Filtering your queries"},{"location":"guides/aws-query-costs/#filtering-by-tags","text":"Tag filtering is similar to filtering by attributes in terms of the logic order and regular expressions support. The only difference is that your andFilters map will contain the tag key/values. # Query all costs that are tagged with 'key=user:Name' and 'value=some-name'. $ cat /tmp/query.json { \"accountId\" : \"012345678901\" , \"startTime\" : \"20220101\" , \"endTime\" : \"20220131\" , \"awsOptions\" : { \"tagFilters\" : [ { \"andFilters\" : { \"user:Name\" : \"some-name\" } } ] } } $ bluectl awscost get --raw-input \" $( cat /tmp/query.json ) \" --out /tmp/out.csv","title":"Filtering by tags"},{"location":"guides/aws-register-payer/","text":"Registering AWS payer accounts using bluectl Warning This guide is only applicable to Ripple users. Make sure to install bluectl first. Also make sure that you have the needed permissions to deploy CloudFormation templates on the payer account. The template used in this guide will setup a new CUR export definition to an S3 bucket. It will also create an IAM Role with read access to the target bucket alongside read-only API access to the payer's cost details such as RIs, SPs, etc. You can check out the actual template here . Open a terminal and run the following command ( 012345678901 is a sample payer account ID): $ bluectl xacct create 012345678901 Open the link below in your browser and deploy: https://console.aws.amazon.com/cloudformation/home?region = us-east-1#/stacks/... Confirm successful deployment? [ Y/n ] : Click on the URL link, or it copy to your browser. It will open the CloudFormation console with the parameters filled up. Check the \"acknowledge\" checkbox, and click \"Create stack\". Once the deployment is done and successful, return to the terminal above and press Enter ( Y is the default option). The deployment validation will begin. If there are no issues, registration details are displayed and the process is completed. Different region for S3 bucket By default, the CloudFormation stack will be deployed to us-east-1 region. This is because, at the time of this writing, AWS only supports CUR export definition on that region. If you prefer to have your S3 bucket located on a different region however, you can do the following steps. First, create an S3 bucket using the command below. When in the CloudFormation console, make sure that you are in your desired region when deploying the stack. You can check out the actual template here . $ bluectl xacct create 012345678901 s3only Once the bucket is created, deploy the main CloudFormation template using the command below. In the CloudFormation console, select the \"USE_EXISTING\" parameter, and update the S3 bucket name ( CurS3BucketName ) and region ( CurS3BucketRegion ) with the values used in the first deployment. $ bluectl xacct create 012345678901","title":"Registering AWS payer accounts"},{"location":"guides/aws-register-payer/#registering-aws-payer-accounts-using-bluectl","text":"Warning This guide is only applicable to Ripple users. Make sure to install bluectl first. Also make sure that you have the needed permissions to deploy CloudFormation templates on the payer account. The template used in this guide will setup a new CUR export definition to an S3 bucket. It will also create an IAM Role with read access to the target bucket alongside read-only API access to the payer's cost details such as RIs, SPs, etc. You can check out the actual template here . Open a terminal and run the following command ( 012345678901 is a sample payer account ID): $ bluectl xacct create 012345678901 Open the link below in your browser and deploy: https://console.aws.amazon.com/cloudformation/home?region = us-east-1#/stacks/... Confirm successful deployment? [ Y/n ] : Click on the URL link, or it copy to your browser. It will open the CloudFormation console with the parameters filled up. Check the \"acknowledge\" checkbox, and click \"Create stack\". Once the deployment is done and successful, return to the terminal above and press Enter ( Y is the default option). The deployment validation will begin. If there are no issues, registration details are displayed and the process is completed.","title":"Registering AWS payer accounts using bluectl"},{"location":"guides/aws-register-payer/#different-region-for-s3-bucket","text":"By default, the CloudFormation stack will be deployed to us-east-1 region. This is because, at the time of this writing, AWS only supports CUR export definition on that region. If you prefer to have your S3 bucket located on a different region however, you can do the following steps. First, create an S3 bucket using the command below. When in the CloudFormation console, make sure that you are in your desired region when deploying the stack. You can check out the actual template here . $ bluectl xacct create 012345678901 s3only Once the bucket is created, deploy the main CloudFormation template using the command below. In the CloudFormation console, select the \"USE_EXISTING\" parameter, and update the S3 bucket name ( CurS3BucketName ) and region ( CurS3BucketRegion ) with the values used in the first deployment. $ bluectl xacct create 012345678901","title":"Different region for S3 bucket"},{"location":"guides/invoice-calc-sched/","text":"Scheduling your invoice calculations using bluectl Warning This guide is only applicable to Ripple users. Make sure to install bluectl first. TBD","title":"Scheduling invoice calculations"},{"location":"guides/invoice-calc-sched/#scheduling-your-invoice-calculations-using-bluectl","text":"Warning This guide is only applicable to Ripple users. Make sure to install bluectl first. TBD","title":"Scheduling your invoice calculations using bluectl"},{"location":"jp/","text":"Overview Welcome to Alphaus documentation. Find user guides, developer guides, API references, tutorials, sample codes, and more.","title":"Overview"},{"location":"jp/#overview","text":"Welcome to Alphaus documentation. Find user guides, developer guides, API references, tutorials, sample codes, and more.","title":"Overview"},{"location":"jp/iam/","text":"Identity & Access Management (IAM) Users There are two types of Alphaus users; root users and subusers. Root users are account owners and super admins. These are the accounts you register to Alphaus and are in email address form. Subusers are users that are created by root users and are typically given minimal access to perform specific roles although subusers can also be admins. RBAC Alphaus RBAC is a organization-wide role-based access control system that provides fine-grained access management to Alphaus features and resources. In using Alphaus RBAC, you can grant only the amount of access to users that they need to perform their jobs. RBAC is defined around users, namespaces, roles, and permissions. Users can be actual users in your organization, or a virtual user used in scripts or automation codes. Roles are job functions or groups that have a certain level of authority, or a list of permissions attached to it. Examples are Admin , Developers , etc. You can assign up to five (5) roles to a user per namespace. RBAC roles and permissions are isolated based on namespaces. What this means is that a role can only be created under a specific namespace, with namespace-specific permissions attached to it. Root users are always super admins, or have unrestricted access across namespaces. Typically, root users should create subusers and assign specific roles to them. Namespaces Below is the list of supported namespaces under Alphaus RBAC: Product/service Namespace Ripple ripple Wave(Pro) wave User management users RBAC management rbac Permissions For the latest permissions, check out here . Permissions are hierarchical. Any user with permissions in the higher hierarchy will have permissions in the lower hierarchy as well. Some permissions can have resources filter. Empty filters mean all resources are allowed. Resources filter also follow the same hierarchical structure and only the Allow effect is supported at the moment.","title":"Identity & Access Management (IAM)"},{"location":"jp/iam/#identity-access-management-iam","text":"","title":"Identity &amp; Access Management (IAM)"},{"location":"jp/iam/#users","text":"There are two types of Alphaus users; root users and subusers. Root users are account owners and super admins. These are the accounts you register to Alphaus and are in email address form. Subusers are users that are created by root users and are typically given minimal access to perform specific roles although subusers can also be admins.","title":"Users"},{"location":"jp/iam/#rbac","text":"Alphaus RBAC is a organization-wide role-based access control system that provides fine-grained access management to Alphaus features and resources. In using Alphaus RBAC, you can grant only the amount of access to users that they need to perform their jobs. RBAC is defined around users, namespaces, roles, and permissions. Users can be actual users in your organization, or a virtual user used in scripts or automation codes. Roles are job functions or groups that have a certain level of authority, or a list of permissions attached to it. Examples are Admin , Developers , etc. You can assign up to five (5) roles to a user per namespace. RBAC roles and permissions are isolated based on namespaces. What this means is that a role can only be created under a specific namespace, with namespace-specific permissions attached to it. Root users are always super admins, or have unrestricted access across namespaces. Typically, root users should create subusers and assign specific roles to them.","title":"RBAC"},{"location":"jp/iam/#namespaces","text":"Below is the list of supported namespaces under Alphaus RBAC: Product/service Namespace Ripple ripple Wave(Pro) wave User management users RBAC management rbac","title":"Namespaces"},{"location":"jp/iam/#permissions","text":"For the latest permissions, check out here . Permissions are hierarchical. Any user with permissions in the higher hierarchy will have permissions in the lower hierarchy as well. Some permissions can have resources filter. Empty filters mean all resources are allowed. Resources filter also follow the same hierarchical structure and only the Allow effect is supported at the moment.","title":"Permissions"}]}